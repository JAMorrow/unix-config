;; .emacs_kowalsky
;; A set of global emacs configurations that apply to both Linux and Windows.


;; MELPA support
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize)

;; hide scroll and tool bars
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

;; save backups in a backups directory instead of cluttering the working dir
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )





;; Moe theme

(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/moe-theme-20160606.2236")
     (add-to-list 'load-path "~/.emacs.d/elpa/moe-theme-20160606.2236")

(require 'moe-theme)
(moe-dark)
(setq moe-theme-mode-line-color 'magenta)

;; Allow upcase
(put 'upcase-region 'disabled nil)

;; Smex for better M-x
(require 'smex) ; Not needed if you use package.el
(smex-initialize) ; Can be omitted. This might cause a (minimal) delay
					; when Smex is auto-initialized on its first run.
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)


;; change all prompts to y or n
(fset 'yes-or-no-p 'y-or-n-p)

;; turn on column number mode
'(column-number-mode t)

;; turn off audible bell
(setq ring-bell-function 'ignore)

;; Bind Hippie Expand to M-<spc>
(global-set-key "\M- " 'hippie-expand)

;; multiple cursors
;;(require 'multiple-cursors)
;;(global-set-key (kbd "C->") 'mc/mark-next-like-this)
;;(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
;;(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)


;; Scons support
(add-to-list 'auto-mode-alist '("SConstruct" . python-mode))
(add-to-list 'auto-mode-alist '("SConscript" . python-mode))

;; lisp mode for my .emacs files
(add-to-list 'auto-mode-alist '(".emacs_kowalsky" . lisp-mode))

;; For the Arduino, treat .ino files as C++ files.
(add-to-list 'auto-mode-alist '("\\.ino$" . c++-mode))


;; Turn on semantic mode
;;(if (fboundp 'semantic-mode) (semantic-mode 1) (semantic-mode 1))


;;(require 'yasnippet)
;;(yas-global-mode 1)

;;(add-hook 'c-mode-common-hook '(lambda ()
;;          (add-to-list 'ac-omni-completion-sources
;;                       (cons "\\." '(ac-source-semantic)))
;;          (add-to-list 'ac-omni-completion-sources
;;                       (cons "->" '(ac-source-semantic)))
;;
;;         (setq ac-sources '(ac-source-semantic ac-source-yasnippet))
;;  ))

;; Rainbow Delimiters
(add-hook 'c-mode-hook #'rainbow-delimiters-mode)
(add-hook 'c++-mode-hook #'rainbow-delimiters-mode)
(add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
(add-hook 'java-mode-hook #'rainbow-delimiters-mode)


;;(require 'template)
(global-set-key (kbd "C-c C-t") 'template-new-file)

;; use source code pro
(set-face-attribute 'default t :font "Source Code Pro-9")
(set-frame-font "Source Code Pro-9" nil t)

;; Binding for Discover my Major keybindings.
(global-set-key (kbd "C-h C-m") 'discover-my-major)

